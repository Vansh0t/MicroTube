// <auto-generated />
using System;
using MicroTube.Data.Access;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MicroTube.Migrations
{
    [DbContext(typeof(MicroTubeDbContext))]
    [Migration("20241111151839_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MicroTube.Data.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PublicUsername")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MicroTube.Data.Models.AppUserSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsInvalidated")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("MicroTube.Data.Models.AuthenticationData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("MicroTube.Data.Models.Comments.VideoComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("NVARCHAR");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Edited")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VideoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoId");

                    b.ToTable("VideoComments");
                });

            modelBuilder.Entity("MicroTube.Data.Models.Comments.VideoCommentReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReactionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId", "CommentId")
                        .IsUnique();

                    b.ToTable("VideoCommentReactions");
                });

            modelBuilder.Entity("MicroTube.Data.Models.Comments.VideoCommentReactionsAggregation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Difference")
                        .HasColumnType("int");

                    b.Property<int>("Dislikes")
                        .HasColumnType("int");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentId")
                        .IsUnique();

                    b.ToTable("VideoCommentAggregatedReactions");
                });

            modelBuilder.Entity("MicroTube.Data.Models.UsedRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("UsedRefreshTokens");
                });

            modelBuilder.Entity("MicroTube.Data.Models.Videos.Video", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CommentsCount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("NVARCHAR");

                    b.Property<int>("LengthSeconds")
                        .HasColumnType("int");

                    b.Property<string>("ThumbnailUrls")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR");

                    b.Property<DateTime>("UploadTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UploaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Urls")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("UploaderId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("MicroTube.Data.Models.Videos.VideoReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReactionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VideoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VideoId");

                    b.HasIndex("UserId", "VideoId")
                        .IsUnique();

                    b.ToTable("VideoReactions");
                });

            modelBuilder.Entity("MicroTube.Data.Models.Videos.VideoReactionsAggregation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Difference")
                        .HasColumnType("int");

                    b.Property<int>("Dislikes")
                        .HasColumnType("int");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<Guid>("VideoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VideoId")
                        .IsUnique();

                    b.ToTable("VideoAggregatedReactions");
                });

            modelBuilder.Entity("MicroTube.Data.Models.Videos.VideoSearchIndexing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastIndexingTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ReindexingRequired")
                        .HasColumnType("bit");

                    b.Property<string>("SearchIndexId")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<Guid>("VideoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VideoId")
                        .IsUnique();

                    b.ToTable("VideoSearchIndexing");
                });

            modelBuilder.Entity("MicroTube.Data.Models.Videos.VideoUploadProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Format")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR");

                    b.Property<int?>("Fps")
                        .HasColumnType("int");

                    b.Property<string>("FrameSize")
                        .HasMaxLength(36)
                        .HasColumnType("VARCHAR");

                    b.Property<int?>("LengthSeconds")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("SourceFileRemoteCacheFileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("SourceFileRemoteCacheLocation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR");

                    b.Property<Guid>("UploaderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UploaderId");

                    b.ToTable("VideoUploadProgresses");
                });

            modelBuilder.Entity("MicroTube.Data.Models.Videos.VideoView", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<Guid>("VideoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Ip")
                        .IsUnique();

                    b.HasIndex("VideoId");

                    b.ToTable("VideoViews");
                });

            modelBuilder.Entity("MicroTube.Data.Models.Videos.VideoViewsAggregation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VideoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VideoId")
                        .IsUnique();

                    b.ToTable("VideoAggregatedViews");
                });

            modelBuilder.Entity("MicroTube.Data.Models.BasicFlowAuthenticationData", b =>
                {
                    b.HasBaseType("MicroTube.Data.Models.AuthenticationData");

                    b.Property<string>("EmailConfirmationString")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("EmailConfirmationStringExpiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("PasswordResetString")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("PasswordResetStringExpiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("PendingEmail")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.ToTable("BasicFlowAuthenticationData", (string)null);
                });

            modelBuilder.Entity("MicroTube.Data.Models.AppUserSession", b =>
                {
                    b.HasOne("MicroTube.Data.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MicroTube.Data.Models.AuthenticationData", b =>
                {
                    b.HasOne("MicroTube.Data.Models.AppUser", "User")
                        .WithOne("Authentication")
                        .HasForeignKey("MicroTube.Data.Models.AuthenticationData", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MicroTube.Data.Models.Comments.VideoComment", b =>
                {
                    b.HasOne("MicroTube.Data.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MicroTube.Data.Models.Videos.Video", "Video")
                        .WithMany()
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("MicroTube.Data.Models.Comments.VideoCommentReaction", b =>
                {
                    b.HasOne("MicroTube.Data.Models.Comments.VideoComment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MicroTube.Data.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MicroTube.Data.Models.Comments.VideoCommentReactionsAggregation", b =>
                {
                    b.HasOne("MicroTube.Data.Models.Comments.VideoComment", "Comment")
                        .WithOne("CommentReactionsAggregation")
                        .HasForeignKey("MicroTube.Data.Models.Comments.VideoCommentReactionsAggregation", "CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("MicroTube.Data.Models.UsedRefreshToken", b =>
                {
                    b.HasOne("MicroTube.Data.Models.AppUserSession", "Session")
                        .WithMany("UsedTokens")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("MicroTube.Data.Models.Videos.Video", b =>
                {
                    b.HasOne("MicroTube.Data.Models.AppUser", "Uploader")
                        .WithMany()
                        .HasForeignKey("UploaderId");

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("MicroTube.Data.Models.Videos.VideoReaction", b =>
                {
                    b.HasOne("MicroTube.Data.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MicroTube.Data.Models.Videos.Video", "Video")
                        .WithMany()
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("MicroTube.Data.Models.Videos.VideoReactionsAggregation", b =>
                {
                    b.HasOne("MicroTube.Data.Models.Videos.Video", "Video")
                        .WithOne("VideoReactionsAggregation")
                        .HasForeignKey("MicroTube.Data.Models.Videos.VideoReactionsAggregation", "VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Video");
                });

            modelBuilder.Entity("MicroTube.Data.Models.Videos.VideoSearchIndexing", b =>
                {
                    b.HasOne("MicroTube.Data.Models.Videos.Video", "Video")
                        .WithOne("VideoIndexing")
                        .HasForeignKey("MicroTube.Data.Models.Videos.VideoSearchIndexing", "VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Video");
                });

            modelBuilder.Entity("MicroTube.Data.Models.Videos.VideoUploadProgress", b =>
                {
                    b.HasOne("MicroTube.Data.Models.AppUser", "Uploader")
                        .WithMany()
                        .HasForeignKey("UploaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("MicroTube.Data.Models.Videos.VideoView", b =>
                {
                    b.HasOne("MicroTube.Data.Models.Videos.Video", "Video")
                        .WithMany()
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Video");
                });

            modelBuilder.Entity("MicroTube.Data.Models.Videos.VideoViewsAggregation", b =>
                {
                    b.HasOne("MicroTube.Data.Models.Videos.Video", "Video")
                        .WithOne("VideoViewsAggregation")
                        .HasForeignKey("MicroTube.Data.Models.Videos.VideoViewsAggregation", "VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Video");
                });

            modelBuilder.Entity("MicroTube.Data.Models.AppUser", b =>
                {
                    b.Navigation("Authentication");
                });

            modelBuilder.Entity("MicroTube.Data.Models.AppUserSession", b =>
                {
                    b.Navigation("UsedTokens");
                });

            modelBuilder.Entity("MicroTube.Data.Models.Comments.VideoComment", b =>
                {
                    b.Navigation("CommentReactionsAggregation");
                });

            modelBuilder.Entity("MicroTube.Data.Models.Videos.Video", b =>
                {
                    b.Navigation("VideoIndexing");

                    b.Navigation("VideoReactionsAggregation");

                    b.Navigation("VideoViewsAggregation");
                });
#pragma warning restore 612, 618
        }
    }
}
